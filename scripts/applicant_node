#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Standart, System and Third Party

# ROS
import rospy
from std_msgs.msg import String

# Robonomics communication
from robonomics_msgs.msg import Demand
from ethereum_common.msg import Address, UInt256
from ethereum_common.srv import Accounts, BlockNumber
from ipfs_common.msg import Multihash
from ipfs_common.ipfs_rosbag import IpfsRosBag

from collector_agent.srv import PublishDemand, PublishDemandResponse


class ApplicantNode:

    def __init__(self):
        rospy.init_node('applicant')
        rospy.loginfo('Launching applicant node...')

        rospy.wait_for_service('/eth/current_block')
        rospy.wait_for_service('/eth/accounts')
        self.accounts = rospy.ServiceProxy('/eth/accounts', Accounts)()
        rospy.loginfo(str(self.accounts))  # AIRA ethereum addresses

        self.signing_demand = rospy.Publisher('/liability/infochan/eth/signing/demand', Demand, queue_size=128)

        rospy.Service('publish_demand', PublishDemand, self.act)

        rospy.loginfo('Applicant node is ready!')

    def act(self, data):
        self.make_demand(data.delta)
        return PublishDemandResponse()

    def make_deadline(self):
        lifetime = int(rospy.get_param('~order_lifetime'))
        deadline = rospy.ServiceProxy('/eth/current_block', BlockNumber)().number + lifetime
        return str(deadline)

    def make_objective(self, delta) -> Multihash:
        rospy.loginfo("Saving log to IPFS...")
        topics = {
                "/energy": [String(str(delta))]
                }

        bag = IpfsRosBag(messages=topics)
        rospy.loginfo("Hash of the log: {}".format(bag.multihash.multihash))
        return bag.multihash

    def make_demand(self, delta):
        demand = Demand()
        demand.model = Multihash(rospy.get_param('~model'))
        demand.objective = self.make_objective(delta)
        demand.token = Address(rospy.get_param('~token'))
        demand.lighthouse = Address(rospy.get_param('~lighthouse'))
        demand.cost = UInt256(str(rospy.get_param('~cost')))
        demand.validatorFee = UInt256("0")
        demand.validator = Address(rospy.get_param('~validator'))
        demand.deadline = UInt256()
        demand.deadline.uint256 = self.make_deadline()

        rospy.loginfo("Sending a request to issue green certificates to Robonomics Network...")
        self.signing_demand.publish(demand)

    def spin(self):
        rospy.spin()


if __name__ == '__main__':
    ApplicantNode().spin()

